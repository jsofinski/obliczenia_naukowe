module Blocksys

using Printf
using Statistics

export func1
export readMatrix
export readVector
export calcEquations
export calcEquationsWithX
export myGauss
export myGaussWithPartialPivoting
export calcRelativeError

function func1()
    return 1
end

function readMatrix(fileName::String, optimal::Bool) 
    data = readlines(fileName)
    numbers = split(data[1], " ")

    aSize = parse(Int64, numbers[1])
    blockSize = parse(Int64, numbers[2])
    dataSize = length(data)

    AMatrix = zeros(Float64, (aSize, aSize))

    optMatrix = zeros(Float64, (aSize, 2 + 2*blockSize))

    for i in 2:(dataSize)
        numbers = split(data[i], " ")
        iPos = parse(Int64, numbers[1])
        jPos = parse(Int64, numbers[2])
        value = parse(Float64, numbers[3])
        AMatrix[iPos, jPos] = value
        # println(value)
    end


    for i in 2:(dataSize)
        numbers = split(data[i], " ")
        iPos = parse(Int64, numbers[1])
        jPos = parse(Int64, numbers[2])
        value = parse(Float64, numbers[3])

        optJ = 0
        # Ck
        if jPos - iPos == 4 
            optJ = 2*blockSize + 2
            optMatrix[iPos, optJ] = value
        # Ak
        elseif ceil(iPos/blockSize) == ceil(jPos/blockSize)
            optJ = jPos%4 + 3
            optMatrix[iPos, optJ] = value
        # Bk
        else
            optJ = (jPos+2)%blockSize
            optMatrix[iPos, optJ] = value
        end

        AMatrix[iPos, jPos] = value
        # println(value)
    end

    # println(size(AMatrix))
    # println(dataSize)
    # println(aSize)
    # println(blockSize)

    # show(stdout, "text/plain", optMatrix)
    # println()
    if (optimal)
        return optMatrix
    else
        return AMatrix
    end
end

function readVector(fileName::String) 
    data = readlines(fileName)
    numbers = split(data[1], " ")
    size = parse(Int64, numbers[1])
    dataSize = length(data)

    b::Vector{Float64} = []
    for i in 2:(dataSize)
        numbers = split(data[i], " ")
        push!(b, parse(Float64, numbers[1]))
    end

    # println(b)
    return b
end


function calcEquations(A::Matrix{Float64}, b::Vector{Float64})
    return A\b
end


function myGauss(A::Matrix{Float64}, b::Vector{Float64})
    matrixSize = size(A, 1)
    x = zeros(matrixSize)
    # elimination
    for i in 1:matrixSize
        for j in i+1:matrixSize
            if A[j, i] == 0
                continue
            end
            factor = A[j, i]/A[i, i]
            for k in i:matrixSize
                A[j, k] = A[j, k] - A[i, k] * factor
            end
            b[j] = b[j] - b[i] * factor
        end
    end

    x[matrixSize] = b[matrixSize]/A[matrixSize, matrixSize]
    for i in matrixSize-1:-1:1
        sum = 0.0
        for j in (i+1):matrixSize
            sum += A[i,j] * x[j]
            x[i] = (b[i] - sum)/A[i,i]
        end
    end
    return x
end

function myOptimalGauss(A::Matrix{Float64}, b::Vector{Float64})
    columnSize = size(A, 1)
    rowSize = size(A, 2)
    x = zeros(columnSize)
    # elimination
    for i in 1:columnSize
        for j in i+1:matrixSize
            if A[j, i] == 0
                continue
            end
            factor = A[j, i]/A[i, i]
            for k in i:matrixSize
                A[j, k] = A[j, k] - A[i, k] * factor
            end
            b[j] = b[j] - b[i] * factor
        end
    end

    x[matrixSize] = b[matrixSize]/A[matrixSize, matrixSize]
    for i in matrixSize-1:-1:1
        sum = 0.0
        for j in (i+1):matrixSize
            sum += A[i,j] * x[j]
            x[i] = (b[i] - sum)/A[i,i]
        end
    end
    return x
end

function myGaussWithPartialPivoting(A::Matrix{Float64}, b::Vector{Float64})
    matrixSize = size(A, 1)
    x = zeros(matrixSize)
    # elimination
    
    for i in 1:matrixSize
        # PARITAIL PIVOTING HERE
        # FIND MAX VALUE IN COLUMN AND SWITCH ROWS
        maxIndex = i
        maxValue = abs(A[i, i])

        # show(stdout, "text/plain", A)
        for j in i+1:matrixSize
            if abs(A[j, i]) > maxValue
                maxIndex = j
                maxValue = abs(A[j, i])
            end
        end
        if maxIndex != i 
            # swap i with maxIndex
            for j in i:matrixSize
                temp = A[maxIndex,j]
                A[maxIndex, j] = A[i, j]
                A[i, j] = temp 
            end

            # swap vector values
            temp = b[maxIndex]
            b[maxIndex] = b[i]
            b[i] = temp 
        end
        # show(stdout, "text/plain", A)

        for j in i+1:matrixSize
            if A[j, i] != 0
                factor = A[j, i]/A[i, i]
                for k in i:matrixSize
                    A[j, k] = A[j, k] - A[i, k] * factor
                end
                b[j] = b[j] - b[i] * factor
            end
        end
    end

    x[matrixSize] = b[matrixSize]/A[matrixSize, matrixSize]
    for i in matrixSize-1:-1:1
        sum = 0.0
        for j in (i+1):matrixSize
            sum += A[i,j] * x[j]
            x[i] = (b[i] - sum)/A[i,i]
        end
    end
    return x
end

function calcEquationsWithX(A::Matrix{Float64}) 
    matrixSize = size(A)[1]
    # println(sizex)
    x = ones(Float64, (matrixSize, 1))
    return A * x
end

function norm(a::Vector{Float64})
    sum = 0.0
    for i in 1:length(a)
        sum += a[i]^2.0
    end
    return sqrt(sum)
end
function calcRelativeError(b::Vector{Float64}, x::Vector{Float64})
    # println(norm(b))
    # println(norm(x))
    # println((b-x))
    return (norm(b - x)/norm(x))
end 


end